"""
Django settings for kits_labsemster project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from decouple import config
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

from pathlib import Path



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fl0m2u!d*7r8d#zls$2cw#7zs_hf)+mpl=v^b=)(7d+s9^6w)i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
CSRF_TRUSTED_ORIGINS = ['https://ctc.karunya.edu']
ALLOWED_HOSTS = ['*']
APPEND_SLASH = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'django_auth_ldap',
    'kitslab',
    'authentication',
    'faculty',
    'ctc_examtime',
    'ctc_home',
    'ctc_seraphauthentication',
    'GCR_draft',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'ctc_home.middleware.NoCacheMiddleware',
]



LOGIN_URL = 'login'
LOGOUT_REDIRECT_URL = 'login'

ROOT_URLCONF = 'kits_labsemster.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kits_labsemster.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True

AUTHENTICATION_BACKENDS = [
  'django_auth_ldap.backend.LDAPBackend',
  'django.contrib.auth.backends.ModelBackend', 
]


import ldap
from django_auth_ldap.config import LDAPSearch, ActiveDirectoryGroupType

# AUTH_LDAP_SERVER_URI = os.getenv('AUTH_LDAP_SERVER_URI')
# AUTH_LDAP_BIND_DN = os.getenv('AUTH_LDAP_BIND_DN')
# AUTH_LDAP_BIND_PASSWORD = os.getenv('AUTH_LDAP_BIND_PASSWORD')

AUTH_LDAP_SERVER_URI = os.getenv('AUTH_LDAP_SERVER_URI')
AUTH_LDAP_BIND_DN = os.getenv('AUTH_LDAP_BIND_DN')
AUTH_LDAP_BIND_PASSWORD = os.getenv('AUTH_LDAP_BIND_PASSWORD')

# TEST_LDAP_SERVER_URI = os.getenv('TEST_LDAP_SERVER_URI')
# TEST_LDAP_BIND_DN = os.getenv('TEST_LDAP_BIND_DN')
# TEST_LDAP_BIND_PASSWORD = os.getenv('TEST_LDAP_BIND_PASSWORD')
# TEST_LDAP_SEARCH_BASE = os.getenv('TEST_LDAP_SEARCH_BASE', 'DC=karunya,DC=edu')

AUTH_LDAP_USER_SEARCH = LDAPSearch(
    "CN=Users,DC=karunya,DC=edu",
    ldap.SCOPE_SUBTREE,
    "(sAMAccountName=%(user)s)"
)

AUTH_LDAP_USER_ATTR_MAP = {
    "username": "sAMAccountName",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}

AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    "CN=Users,DC=karunya,DC=edu",
    ldap.SCOPE_SUBTREE,
    "(objectClass=group)"
)

AUTH_LDAP_GROUP_TYPE = ActiveDirectoryGroupType()


# print("LDAP URI:", repr(AUTH_LDAP_SERVER_URI))
# print("Bind DN:", repr(AUTH_LDAP_BIND_DN))
# print("Bind Password:", repr(AUTH_LDAP_BIND_PASSWORD))

AUTH_LDAP_REQUIRE_GROUP = "CN=timetable,CN=Users,DC=karunya,DC=edu"
AUTH_LDAP_CREATE_USERS = True
AUTH_LDAP_ALWAYS_UPDATE_USER = True





# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# If you're serving static files in development
STATICFILES_DIRS = [
    BASE_DIR / "static",  # or os.path.join(BASE_DIR, "static")
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DEFAULT_FROM_EMAIL = config('EMAIL_HOST_USER')

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')


import logging

logger = logging.getLogger('django_auth_ldap')
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.DEBUG)


# AUTH_LDAP_SERVER_URI = os.getenv('AUTH_LDAP_SERVER_URI')
# AUTH_LDAP_BIND_DN = os.getenv('AUTH_LDAP_BIND_DN')
# AUTH_LDAP_BIND_PASSWORD = os.getenv('AUTH_LDAP_BIND_PASSWORD')
# TEST_LDAP_SERVER_URI = os.getenv('TEST_LDAP_SERVER_URI', 'ldap://localhost')
# TEST_LDAP_BIND_DN = os.getenv('TEST_LDAP_BIND_DN', 'cn=admin,dc=example,dc=in')
# TEST_LDAP_BIND_PASSWORD = os.getenv('TEST_LDAP_BIND_PASSWORD', 'password')
# TEST_LDAP_SEARCH_BASE = os.getenv('TEST_LDAP_SEARCH_BASE', 'dc=example,dc=in')

# AUTH_LDAP_USER_SEARCH = LDAPSearch(
#     "dc=example,dc=in",  # Adjust this to match your LDAP structure
#     ldap.SCOPE_SUBTREE,
#     "(uid=%(user)s)"   # Or (sAMAccountName=%(user)s) for AD
# )
# OPTIONAL: For test LDAP (used in views, not global settings)
# TEST_LDAP_SERVER_URI = os.getenv('TEST_LDAP_SERVER_URI')
# TEST_LDAP_BIND_DN = os.getenv('TEST_LDAP_BIND_DN')
# TEST_LDAP_BIND_PASSWORD = 'password'

# TEST_LDAP_SEARCH_BASE = os.getenv('TEST_LDAP_SEARCH_BASE', 'dc=example,dc=in')


# print(f"BIND DN: {TEST_LDAP_BIND_DN}")
# print(f"BIND PASSWORD: {TEST_LDAP_BIND_PASSWORD}")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'password_reset_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'password_reset.log',
        },
    },
    'loggers': {
        'ldap_password_reset': {
            'handlers': ['password_reset_file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
# ldap.set_option(ldap.OPT_X_TLS_NEWCTX, 0)
# AUTH_LDAP_START_TLS = True